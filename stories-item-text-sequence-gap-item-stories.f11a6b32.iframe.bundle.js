"use strict";(self.webpackChunkuap_assessment=self.webpackChunkuap_assessment||[]).push([[189],{"./src/stories/item/text-sequence-gap-item.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ComplexSequence:()=>ComplexSequence,InlineTextInput:()=>InlineTextInput,WithResponse:()=>WithResponse,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Item/TextSequenceGapItem",component:__webpack_require__("./src/stories/item/item.component.ts").J,parameters:{docs:{story:{height:"600px",inline:!1},layout:"padded"}},argTypes:{item:{control:"object",description:"The text sequence gap item to display"}}},InlineTextInput={args:{item:{id:1,seq:1,testId:1,stepId:1,type:"text_sequence_gap",tools:[],sequence:["The","x","is","blue"]}},parameters:{docs:{description:{story:'A text sequence gap item that displays text with a single gap (marked with "x") that users must fill in.'}}}},WithResponse={args:{item:{id:2,seq:2,testId:1,stepId:1,type:"text_sequence_gap",tools:[],sequence:["My","x","is","x","and","I","x","programming"],response:{itemId:2,value:["name","John","love"],valid:!0}}},parameters:{docs:{description:{story:"A text sequence gap item with pre-filled responses showing how the component displays existing answers."}}}},ComplexSequence={args:{item:{id:3,seq:3,testId:1,stepId:1,type:"text_sequence_gap",tools:[],sequence:["The","x","of","the","x","is","x","than","the","x","of","the","x"]}},parameters:{docs:{description:{story:"A more complex text sequence gap item with multiple gaps throughout the sentence."}}}},__namedExportsOrder=["InlineTextInput","WithResponse","ComplexSequence"];InlineTextInput.parameters={...InlineTextInput.parameters,docs:{...InlineTextInput.parameters?.docs,source:{originalSource:"{\n  args: {\n    item: {\n      id: 1,\n      seq: 1,\n      testId: 1,\n      stepId: 1,\n      type: 'text_sequence_gap',\n      tools: [],\n      sequence: ['The', 'x', 'is', 'blue']\n    } as AppTextSequenceGapItem\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A text sequence gap item that displays text with a single gap (marked with \"x\") that users must fill in.'\n      }\n    }\n  }\n}",...InlineTextInput.parameters?.docs?.source}}},WithResponse.parameters={...WithResponse.parameters,docs:{...WithResponse.parameters?.docs,source:{originalSource:"{\n  args: {\n    item: {\n      id: 2,\n      seq: 2,\n      testId: 1,\n      stepId: 1,\n      type: 'text_sequence_gap',\n      tools: [],\n      sequence: ['My', 'x', 'is', 'x', 'and', 'I', 'x', 'programming'],\n      response: {\n        itemId: 2,\n        value: ['name', 'John', 'love'],\n        valid: true\n      }\n    } as AppTextSequenceGapItem\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A text sequence gap item with pre-filled responses showing how the component displays existing answers.'\n      }\n    }\n  }\n}",...WithResponse.parameters?.docs?.source}}},ComplexSequence.parameters={...ComplexSequence.parameters,docs:{...ComplexSequence.parameters?.docs,source:{originalSource:"{\n  args: {\n    item: {\n      id: 3,\n      seq: 3,\n      testId: 1,\n      stepId: 1,\n      type: 'text_sequence_gap',\n      tools: [],\n      sequence: ['The', 'x', 'of', 'the', 'x', 'is', 'x', 'than', 'the', 'x', 'of', 'the', 'x']\n    } as AppTextSequenceGapItem\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'A more complex text sequence gap item with multiple gaps throughout the sentence.'\n      }\n    }\n  }\n}",...ComplexSequence.parameters?.docs?.source}}}}}]);